name: Build and upload assets
on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:
      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install zig on linux
        if: runner.os == 'Linux'
        uses: goto-bus-stop/setup-zig@v2 # needed for cargo-zigbuild

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: bash
          # cargo build --bin sparkled --release
          # cargo build --bin kasplex --release
          # cp target/release/sparkled.exe sparkle-${{ github.event.release.tag_name }}-windows-x64/
          # cp target/release/kasplex.exe sparkle-${{ github.event.release.tag_name }}-windows-x64/
        run: |
          cargo build --bin sparkle --release
          mkdir sparkle-${{ github.event.release.tag_name }}-windows-x64 || true
          cp target/release/sparkle.exe sparkle-${{ github.event.release.tag_name }}-windows-x64/
          archive="sparkle-${{ github.event.release.tag_name }}-windows-x64/sparkle-${{ github.event.release.tag_name }}-windows-x64.zip"
          asset_name="sparkle-${{ github.event.release.tag_name }}-windows-x64.zip"
          powershell "Compress-Archive sparkle-${{ github.event.release.tag_name }}-windows-x64/* \"${archive}\""
          echo "asset_path=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on MacOS
        if: runner.os == 'macOS'
          # cargo build --bin sparkled --release
          # cargo build --bin kasplex --release
          # cp target/release/sparkled sparkle-${{ github.event.release.tag_name }}-macos-arm64/
          # cp target/release/kasplex sparkle-${{ github.event.release.tag_name }}-macos-arm64/
        run: |
          cargo build --bin sparkle --release
          mkdir sparkle-${{ github.event.release.tag_name }}-macos-arm64 || true
          cp target/release/sparkle sparkle-${{ github.event.release.tag_name }}-macos-arm64/
          archive="sparkle-${{ github.event.release.tag_name }}-macos-arm64/sparkle-${{ github.event.release.tag_name }}-macos-arm64.zip"
          asset_name="sparkle-${{ github.event.release.tag_name }}-macos-arm64.zip"
          zip -r "${archive}" ./sparkle-${{ github.event.release.tag_name }}-macos-arm64/*
          echo "asset_path=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on Linux
        if: runner.os == 'Linux'
          # cargo build --bin sparkled --release
          # cargo build --bin kasplex --release
          # cp target/release/sparkled .debpkg/usr/bin/
          # cp target/release/kasplex .debpkg/usr/bin/
          # cp target/release/sparkled sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64/
          # cp target/release/kasplex sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64/
        run: |
          cargo build --bin sparkle --release
          mkdir -p .debpkg/usr/bin
          cp target/release/sparkle .debpkg/usr/bin/
          mkdir sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64 || true
          cp target/release/sparkle sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64/
          archive="sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64/sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          asset_name="sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          zip -r "${archive}" ./sparkle-${{ github.event.release.tag_name }}-linux-gnu-amd64/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Create Linux Debian Package
        if: runner.os == 'Linux'
        id: package_debian
        uses: jiro4989/build-deb-action@v3
        with:
          package: sparkle
          package_root: .debpkg
          maintainer: ASPECTRON
          version: ${{ github.ref }}
          arch: 'amd64'
          desc: 'Sparkle for Kaspa BlockDAG'

      - name: Upload release asset
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.asset_path }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip

      - name: Upload release asset
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.asset_path }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip

      - name: Upload debian package
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ steps.package_debian.outputs.file_name }}"
          asset_name: "${{ steps.package_debian.outputs.file_name }}"
          asset_content_type: application/vnd.debian.binary-package

  # build-wasm:
  #   runs-on: ubuntu-latest
  #   name: Building WASM32 SDK
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Install Protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Install stable toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Install llvm
  #       id: install_llvm
  #       continue-on-error: true
  #       run: |
  #         wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
  #         sudo apt-get install -y clang-15 lldb-15 lld-15 clangd-15 clang-tidy-15 clang-format-15 clang-tools-15 llvm-15-dev lld-15 lldb-15 llvm-15-tools libomp-15-dev libc++-15-dev libc++abi-15-dev libclang-common-15-dev libclang-15-dev libclang-cpp15-dev libunwind-15-dev
  #         # Make Clang 15 default
  #         sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-15/bin/clang++ 100
  #         sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-15/bin/clang 100
  #         sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-15/bin/clang-format 100
  #         sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-15/bin/clang-tidy 100
  #         sudo update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/lib/llvm-15/bin/run-clang-tidy 100
  #         # Alias cc to clang
  #         sudo update-alternatives --install /usr/bin/cc cc /usr/lib/llvm-15/bin/clang 0
  #         sudo update-alternatives --install /usr/bin/c++ c++ /usr/lib/llvm-15/bin/clang++ 0

  #     - name: Install gcc-multilib
  #       # gcc-multilib allows clang to find gnu libraries properly
  #       run: sudo apt install -y gcc-multilib

  #     - name: Install stable toolchain
  #       if: steps.install_llvm.outcome == 'success' && steps.install_llvm.conclusion == 'success'
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Install wasm-pack
  #       run: cargo install wasm-pack

  #     - name: Add wasm32 target
  #       run: rustup target add wasm32-unknown-unknown

  #     - name: Install NodeJS
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install NodeJS dependencies
  #       run: npm install --global typedoc typescript

  #     - name: Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Build WASM32 SDK
  #       run: |
  #         cd wasm
  #         bash build-release
  #         mv release/sparkle-wasm32-sdk.zip ../sparkle-wasm32-sdk-${{ github.event.release.tag_name }}.zip

  #         archive="sparkle-wasm32-sdk-${{ github.event.release.tag_name }}.zip"
  #         asset_name="sparkle-wasm32-sdk-${{ github.event.release.tag_name }}.zip"
  #         echo "archive=${archive}" >> $GITHUB_ENV
  #         echo "asset_name=${asset_name}" >> $GITHUB_ENV

  #     - name: Upload WASM32 SDK
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ github.event.release.upload_url }}
  #         asset_path: "./${{ env.archive }}"
  #         asset_name: "${{ env.asset_name }}"
  #         asset_content_type: application/zip
